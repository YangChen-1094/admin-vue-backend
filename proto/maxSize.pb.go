// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: maxSize.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StringMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ss []*StringSingle `protobuf:"bytes,1,rep,name=ss,proto3" json:"ss,omitempty"`
}

func (x *StringMessage) Reset() {
	*x = StringMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maxSize_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMessage) ProtoMessage() {}

func (x *StringMessage) ProtoReflect() protoreflect.Message {
	mi := &file_maxSize_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMessage.ProtoReflect.Descriptor instead.
func (*StringMessage) Descriptor() ([]byte, []int) {
	return file_maxSize_proto_rawDescGZIP(), []int{0}
}

func (x *StringMessage) GetSs() []*StringSingle {
	if x != nil {
		return x.Ss
	}
	return nil
}

type StringSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StringSingle) Reset() {
	*x = StringSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maxSize_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSingle) ProtoMessage() {}

func (x *StringSingle) ProtoReflect() protoreflect.Message {
	mi := &file_maxSize_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSingle.ProtoReflect.Descriptor instead.
func (*StringSingle) Descriptor() ([]byte, []int) {
	return file_maxSize_proto_rawDescGZIP(), []int{1}
}

func (x *StringSingle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StringSingle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maxSize_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_maxSize_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_maxSize_proto_rawDescGZIP(), []int{2}
}

func (x *Empty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_maxSize_proto protoreflect.FileDescriptor

var file_maxSize_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2e, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x02, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x02, 0x73, 0x73, 0x22,
	0x32, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0xaf, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x03,
	0x4f, 0x6e, 0x65, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x06, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2a, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_maxSize_proto_rawDescOnce sync.Once
	file_maxSize_proto_rawDescData = file_maxSize_proto_rawDesc
)

func file_maxSize_proto_rawDescGZIP() []byte {
	file_maxSize_proto_rawDescOnce.Do(func() {
		file_maxSize_proto_rawDescData = protoimpl.X.CompressGZIP(file_maxSize_proto_rawDescData)
	})
	return file_maxSize_proto_rawDescData
}

var file_maxSize_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_maxSize_proto_goTypes = []interface{}{
	(*StringMessage)(nil), // 0: StringMessage
	(*StringSingle)(nil),  // 1: StringSingle
	(*Empty)(nil),         // 2: Empty
}
var file_maxSize_proto_depIdxs = []int32{
	1, // 0: StringMessage.ss:type_name -> StringSingle
	2, // 1: MaxSize.One:input_type -> Empty
	2, // 2: MaxSize.ClientStream:input_type -> Empty
	2, // 3: MaxSize.ServerStream:input_type -> Empty
	2, // 4: MaxSize.DoubleStream:input_type -> Empty
	1, // 5: MaxSize.One:output_type -> StringSingle
	0, // 6: MaxSize.ClientStream:output_type -> StringMessage
	0, // 7: MaxSize.ServerStream:output_type -> StringMessage
	0, // 8: MaxSize.DoubleStream:output_type -> StringMessage
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_maxSize_proto_init() }
func file_maxSize_proto_init() {
	if File_maxSize_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_maxSize_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maxSize_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maxSize_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_maxSize_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_maxSize_proto_goTypes,
		DependencyIndexes: file_maxSize_proto_depIdxs,
		MessageInfos:      file_maxSize_proto_msgTypes,
	}.Build()
	File_maxSize_proto = out.File
	file_maxSize_proto_rawDesc = nil
	file_maxSize_proto_goTypes = nil
	file_maxSize_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MaxSizeClient is the client API for MaxSize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MaxSizeClient interface {
	One(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringSingle, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (MaxSize_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MaxSize_ServerStreamClient, error)
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (MaxSize_DoubleStreamClient, error)
}

type maxSizeClient struct {
	cc grpc.ClientConnInterface
}

func NewMaxSizeClient(cc grpc.ClientConnInterface) MaxSizeClient {
	return &maxSizeClient{cc}
}

func (c *maxSizeClient) One(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringSingle, error) {
	out := new(StringSingle)
	err := c.cc.Invoke(ctx, "/MaxSize/One", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maxSizeClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (MaxSize_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MaxSize_serviceDesc.Streams[0], "/MaxSize/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxSizeClientStreamClient{stream}
	return x, nil
}

type MaxSize_ClientStreamClient interface {
	Send(*Empty) error
	CloseAndRecv() (*StringMessage, error)
	grpc.ClientStream
}

type maxSizeClientStreamClient struct {
	grpc.ClientStream
}

func (x *maxSizeClientStreamClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxSizeClientStreamClient) CloseAndRecv() (*StringMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maxSizeClient) ServerStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MaxSize_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MaxSize_serviceDesc.Streams[1], "/MaxSize/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxSizeServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MaxSize_ServerStreamClient interface {
	Recv() (*StringMessage, error)
	grpc.ClientStream
}

type maxSizeServerStreamClient struct {
	grpc.ClientStream
}

func (x *maxSizeServerStreamClient) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *maxSizeClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (MaxSize_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MaxSize_serviceDesc.Streams[2], "/MaxSize/DoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxSizeDoubleStreamClient{stream}
	return x, nil
}

type MaxSize_DoubleStreamClient interface {
	Send(*Empty) error
	Recv() (*StringMessage, error)
	grpc.ClientStream
}

type maxSizeDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *maxSizeDoubleStreamClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxSizeDoubleStreamClient) Recv() (*StringMessage, error) {
	m := new(StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxSizeServer is the server API for MaxSize service.
type MaxSizeServer interface {
	One(context.Context, *Empty) (*StringSingle, error)
	ClientStream(MaxSize_ClientStreamServer) error
	ServerStream(*Empty, MaxSize_ServerStreamServer) error
	DoubleStream(MaxSize_DoubleStreamServer) error
}

// UnimplementedMaxSizeServer can be embedded to have forward compatible implementations.
type UnimplementedMaxSizeServer struct {
}

func (*UnimplementedMaxSizeServer) One(context.Context, *Empty) (*StringSingle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method One not implemented")
}
func (*UnimplementedMaxSizeServer) ClientStream(MaxSize_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedMaxSizeServer) ServerStream(*Empty, MaxSize_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (*UnimplementedMaxSizeServer) DoubleStream(MaxSize_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}

func RegisterMaxSizeServer(s *grpc.Server, srv MaxSizeServer) {
	s.RegisterService(&_MaxSize_serviceDesc, srv)
}

func _MaxSize_One_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaxSizeServer).One(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MaxSize/One",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaxSizeServer).One(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaxSize_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxSizeServer).ClientStream(&maxSizeClientStreamServer{stream})
}

type MaxSize_ClientStreamServer interface {
	SendAndClose(*StringMessage) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type maxSizeClientStreamServer struct {
	grpc.ServerStream
}

func (x *maxSizeClientStreamServer) SendAndClose(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxSizeClientStreamServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MaxSize_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaxSizeServer).ServerStream(m, &maxSizeServerStreamServer{stream})
}

type MaxSize_ServerStreamServer interface {
	Send(*StringMessage) error
	grpc.ServerStream
}

type maxSizeServerStreamServer struct {
	grpc.ServerStream
}

func (x *maxSizeServerStreamServer) Send(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MaxSize_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxSizeServer).DoubleStream(&maxSizeDoubleStreamServer{stream})
}

type MaxSize_DoubleStreamServer interface {
	Send(*StringMessage) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type maxSizeDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *maxSizeDoubleStreamServer) Send(m *StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxSizeDoubleStreamServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MaxSize_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MaxSize",
	HandlerType: (*MaxSizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "One",
			Handler:    _MaxSize_One_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _MaxSize_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _MaxSize_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _MaxSize_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxSize.proto",
}
